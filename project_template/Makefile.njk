.DEFAULT_GOAL := all

.PHONY: all
all: ## Show the available make targets.
	@echo "Usage: make <target>"
	@echo ""
	@echo "Targets:"
	@fgrep "##" Makefile | fgrep -v fgrep

.PHONY: clean
clean: ## Clean the temporary files.
	rm -rf .pytest_cache
	rm -rf .coverage
	rm -rf .ruff_cache

.PHONY: format
format:  ## Format the code using Ruff.
	${{ values.package_manager }} run ruff format .
	${{ values.package_manager }} run ruff check . --fix

.PHONY: lint
lint:  ## Run all linters (ruff).
	${{ values.package_manager }} run ruff check .

.PHONY: security-scan
security-scan:  ## Run security scan using Bandit.
	${{ values.package_manager }} run bandit -r ${{ values.module_name }}

.PHONY: test
test:  ## Run all the tests and check coverage.
	${{ values.package_manager }} run pytest -n auto --cov=${{ values.module_name }} --cov-report term-missing --cov-fail-under=100 tests/

.PHONY: test-unit
test-unit: ## Run the unit tests and check coverage.
	${{ values.package_manager }} run pytest -n auto --cov=${{ values.module_name }} --cov-report term-missing --cov-fail-under=100 tests/unit

.PHONY: test-e2e
test-e2e: ## Run the end-to-end tests.
	${{ values.package_manager }} run pytest tests/e2e

.PHONY: install
install:  ## Install the dependencies excluding dev.
	{% if values.package_manager == "poetry" -%}
	poetry install --only main
	{%- elif values.package_manager == "pipenv" -%}
	pipenv install
	{%- endif %}

.PHONY: install-dev
install-dev:  ## Install the dependencies including dev.
	{% if values.package_manager == "poetry" -%}
	poetry install
	{%- elif values.package_manager == "pipenv" -%}
	pipenv install --dev
	{%- endif %}

.PHONY: run
run:
	${{ values.package_manager }} run python run_etl.py

